<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_kanban</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyname = "localHi" + string(global.gamemode);
text1 = 0;
wait = 0
wait_state = 0;

x = room_width / 2;
y = 544;
state = 0;
image_scale = 0.3;

menu_select = 0;
menu_select_y = y + 405;

saved = 0;

var ss;
var ss_center;

main_color = make_color_rgb(199, 136, 51);
orange = make_color_rgb(233, 206, 169);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wait = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu_select = clamp(menu_select, 0, 1);

if(global.gameover == 3){
    if(global.local_hscore[global.gamemode] &lt; score &amp;&amp; saved == 0){
        ini_open("data.ini");
        ini_write_real("data", keyname, score);
        ini_close();
        saved = 1;
    }

    visible = true;
    y = clamp(y, 20, 600);
    if(y &gt; 20) y -= 30;
    
    if(wait == 0 &amp;&amp; wait_state == 0) {
         alarm[0] = 10;
         wait_state = 1;
    }
    
    switch(state){
        case 0:
            // ss = sprite_add("gameover.png", 1, 0, 0, 0, 0);
            // ss_center = (sprite_get_width(ss) * image_scale) / 2;
            state = 1;
            instance_destroy(obj_pause);
            break;
    }
    
    if(gamepad_button_check_pressed(0, gp_padu) || keyboard_check_pressed(vk_up)) {menu_select -= 1; audio_play_sound(snd_select, 10, false);}
    else if(gamepad_button_check_pressed(0, gp_padd) || keyboard_check_pressed(vk_down)) {menu_select += 1; audio_play_sound(snd_select, 10, false);}
    
    menu_select_y = clamp(menu_select_y, y + (405 + (30 * menu_select)), y + (405 + (30 * menu_select)));
    
    if(global.global_hscore &lt; score) server_send_score(global.gamemode + 1);
    
    if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)){
        if(wait == 1){
            if(audio_is_playing(obj_player.bgm)) audio_stop_sound(obj_player.bgm);
            
            switch(menu_select){
                case 0:
                    audio_play_sound(snd_ok, 10, false);
                    room_restart();
                    break;
                    
                case 1:
                    audio_play_sound(snd_ok, 10, false);
                    room_goto(rm_menu);
                    break;
            }
        }
    }
}    

else visible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.gameover == 3){
    
    draw_self();
    //draw_rectangle_colour(x - (401 / 2), y, x + (401 / 2), y + 500, main_color, main_color, main_color, main_color, false);
    
    draw_set_halign(fa_center);
    
    draw_set_font(ft_main);
    draw_set_color(c_black);
    
    
    draw_text_transformed(x, y + 40, language_map(global.lang, 15), 1.3, 1.3, 0);
    draw_sprite_ext(spr_howto_play, 7, x, y + 190, 0.8, 0.8, 0, c_white, 1);
    
    //score
    draw_text_transformed(x, y + 270, language_map(global.lang, 7), 0.5, 0.5, 0);
    draw_text_transformed(x, y + 290, string(score), 0.8, 0.8, 0);
    
    //Local / Global highscore
    if(global.test[2] == "ready") {
        draw_text_transformed(x, y + 320, language_map(global.lang, 9), 0.5, 0.5, 0);
        draw_text_transformed(x, y + 340, string(global.global_hscore[global.gamemode]), 0.8, 0.8, 0);
    }
    else {
        draw_text_transformed(x, y + 320, language_map(global.lang, 8), 0.5, 0.5, 0);
        draw_text_transformed(x, y + 340, string(global.local_hscore[global.gamemode]), 0.8, 0.8, 0);
    }
    
    draw_set_color(main_color);
    draw_rectangle(x - (sprite_get_width(spr_kanban) / 2) + 20, menu_select_y - 15, x + (sprite_get_width(spr_kanban) / 2) - 20, menu_select_y + 15, false);
    
    draw_set_valign(fa_middle);
    draw_set_color(c_black);
    draw_text_transformed(x, y + 405, language_map(global.lang, 13), 0.7, 0.7, 0);
    draw_text_transformed(x, y + 405 + 30, language_map(global.lang, 14), 0.7, 0.7, 0);
    
    default_align();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

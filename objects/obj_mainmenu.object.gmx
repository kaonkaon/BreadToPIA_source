<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

global.gameover = 0;
a = instance_create(0, 0, obj_transition);
a.transition = 1;
a.main_color = c_white;

bgm = audio_play_sound(snd_bgm0, 10, true);
audio_sound_gain(bgm, 0, 0);
audio_sound_gain(bgm, 0.2, 1000);

global.harahara = 0;

lang_min = 0;
lang_max = 14;

title_y = 115;

menu_select = 0;
menu_select_sub = 0;
menu_y = 0;
bob_state = 0;
bob_speed = 2;

howto_page = 0;

main_color = make_color_rgb(199, 136, 51);
credit_scroll = 544;
credit_scroll_speed = 0.4;

global.gamemode = 0;

ini_open("data.ini");
global.local_hscore[0] = ini_read_real("data", "localHi0", 0);
global.local_hscore[1] = ini_read_real("data", "localHi1", 0);
global.lang = ini_read_real("data", "language", 0);
ini_close();

connect_test_result[0] = "";
connect_test_result[1] = "";
test[0] = "";
test[1] = "";
global.test[2] = "";

global.global_hscore[0] = 0;
global.global_hscore[1] = 0;

for(i = 0; i &lt; 2; i++) get_hscore[i] = server_display_score(i + 1);

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(test[0] != test[1] &amp;&amp; test[0] != "ok" &amp;&amp; test[1] != "ok"){
    for(i = 0; i &lt; 2; i++) get_hscore[i] = server_display_score(i + 1);
    alarm[0] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// menu_select = clamp(menu_select, 0, 3);
global.lang = clamp(global.lang, lang_min, lang_max);
howto_page = clamp(howto_page, 0, 6);

if(gamepad_button_check_pressed(0, gp_padu) || keyboard_check_pressed(vk_up)) {menu_select -= 1; audio_play_sound(snd_select, 10, false);}
else if(gamepad_button_check_pressed(0, gp_padd) || keyboard_check_pressed(vk_down)) {menu_select += 1; audio_play_sound(snd_select, 10, false);}

menu_y = clamp(menu_y, 270 + (60 * menu_select), 270 + (60 * menu_select));



switch(menu_select_sub){
    case 0: 
        howto_page = 0;
        credit_scroll = 544;
        if(title_y &lt; 115) title_y += 10;
        menu_select = clamp(menu_select, 0, 3);
        switch(menu_select){
            case 0:
                if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)) {menu_select_sub = 1; audio_play_sound(snd_ok, 10, false);}
                break;
                
            case 1:
                if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)) {menu_select_sub = 2; audio_play_sound(snd_ok, 10, false);}
                break;
                
            case 2:
                if(gamepad_button_check_pressed(0, gp_padl) || keyboard_check_pressed(vk_left)) {
                    if(global.lang &gt; lang_min){
                        global.lang -= 1; 
                        audio_play_sound(snd_select, 10, false);
                        ini_open("data.ini");
                        ini_write_real("data", "language", global.lang);
                        ini_close();
                    }
                }
                else if(gamepad_button_check_pressed(0, gp_padr) || keyboard_check_pressed(vk_right)) {
                    if(global.lang &lt; lang_max){
                        global.lang += 1; 
                        audio_play_sound(snd_select, 10, false);
                        ini_open("data.ini");
                        ini_write_real("data", "language", global.lang);
                        ini_close();
                    }
                }
                break;
            
            case 3:
                if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)) {menu_select_sub = 3; audio_play_sound(snd_select, 10, false);}
                break;
        }
        break;
        
    case 1:
        menu_select = clamp(menu_select, 0, 2);
        switch(menu_select){
            case 0: 
                if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)){
                    global.gamemode = 0;
                    room_goto(rm_game);
                    audio_play_sound(snd_ok, 10, false);
                    audio_stop_sound(bgm);
                }
                break;
                
            case 1: 
                if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)){
                    global.gamemode = 1;
                    room_goto(rm_game);
                    audio_play_sound(snd_ok, 10, false);
                    audio_stop_sound(bgm);
                }
                break;
        
            case 2:
                if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)) { menu_select_sub = 0; menu_select = 0; audio_play_sound(snd_cancel, 10, false);}
                break;
        }
        break;
        
    case 2:
        menu_select = clamp(menu_select, 3, 3);
        if(gamepad_button_check_pressed(0, gp_padl)  || keyboard_check_pressed(vk_left)){ if (howto_page &gt; 0) {howto_page -= 1; audio_play_sound(snd_select, 10, false);}}
        else if(gamepad_button_check_pressed(0, gp_padr)  || keyboard_check_pressed(vk_right)){ if(howto_page &lt; 6) {howto_page += 1; audio_play_sound(snd_select, 10, false);}}
            
        if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)) { menu_select_sub = 0; menu_select = 0; audio_play_sound(snd_cancel, 10, false);}
        
        if(title_y &gt; 0) title_y -= 10;
        
        break;
        
    case 3:
        menu_select = clamp(menu_select, 3, 3);
        if(gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_space)) { menu_select_sub = 0; menu_select = 0; audio_play_sound(snd_cancel, 10, false);}
        credit_scroll -= credit_scroll_speed + (1 * gamepad_axis_value(0, gp_axislv)) + (keyboard_check(vk_down) * 5);
        break;
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

for(i = 0; i &lt; 2; i++){
    if(ds_map_find_value(async_load, "id") == get_hscore[i]){
        connect_test_result[i] = string(ds_map_find_value(async_load, "result"));
        if(connect_test_result[i] == "IOException" or connect_test_result[i] == ""){
            test[i] = "no";
            connect_test_result[i] = "";
        } else {
            test[i] = "ok";
            global.global_hscore[i] = real(connect_test_result[i]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(main_color);
//draw_rectangle((room_width / 2) - 200, menu_y + 27, (room_width / 2) + 200, menu_y - 27, false);
draw_rectangle(0, menu_y + 27, room_width, menu_y - 27, false);

draw_set_halign(fa_center);
draw_set_color(c_black);
draw_set_font(ft_title);

if(menu_select_sub != 3) draw_text(room_width / 2, title_y, " &lt; BreadToPIA &gt; ");

draw_set_valign(fa_middle);
draw_set_font(ft_main);

draw_set_alpha(0.6);
draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_text_transformed(room_width - 5, 5, language_map(100, 0), 0.4, 0.4, 0);

draw_set_alpha(1);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

switch(menu_select_sub){
    case 0:
        draw_text_transformed(room_width / 2, 270, language_map(global.lang, 0), 1, 1, 0);
        draw_text_transformed(room_width / 2, 330, language_map(global.lang, 1), 1, 1, 0);
        
        switch(global.lang){
            case 0:
                draw_text(room_width / 2, 390, "English &gt;");
                break;
                
            case 1:
                draw_text(room_width / 2, 390, "&lt; Lodsteal &gt;");
                break;
                
            case 2:
                draw_text(room_width / 2, 390, "&lt; Deutsch &gt;");
                break;
            
            case 3:
                draw_text(room_width / 2, 390, "&lt; Italia &gt;");
                break;
            
            case 4:
                draw_text(room_width / 2, 390, "&lt; Français &gt;");
                break;
                
            case 5:
                draw_text(room_width / 2, 390, "&lt; Español &gt;");
                break;
                
            case 6:
                draw_text(room_width / 2, 390, "&lt; Indonesia &gt;");
                break;
                
            case 7:
                draw_text(room_width / 2, 390, "&lt; Latin &gt;");
                break;
                
            case 8:
                draw_text(room_width / 2, 390, "&lt; Filipino &gt;");
                break;
                
            case 9:
                draw_text(room_width / 2, 390, "&lt; Esperanto &gt;");
                break;
                
            case 10:
                draw_text(room_width / 2, 390, "&lt; Svenska &gt;");
                break;
                
            case 11:
                draw_text(room_width / 2, 390, "&lt; Suomi &gt;");
                break;
                
            case 12:
                draw_text(room_width / 2, 390, "&lt; Íslenska &gt;");
                break;
                
            case 13:
                draw_text(room_width / 2, 390, "&lt; Han3 yu3 &gt;");
                break;
                
            case 14:
                draw_text(room_width / 2, 390, "&lt; Lunari");
                break;
        }
        draw_text_transformed(room_width / 2, 450, language_map(global.lang, 2), 1, 1, 0);
        
        switch(menu_select){
            case 0:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 27), 0.5, 0.5, 0);
                break;
                
            case 1:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 28), 0.5, 0.5, 0);
                break;
                
            case 2:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 29), 0.5, 0.5, 0);
                break;
                
            case 3:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 34), 0.5, 0.5, 0);
                break;
        }
        
        
        break;
        
    case 1:
        draw_text(room_width / 2, 270, language_map(global.lang, 22));
        draw_text(room_width / 2, 330, language_map(global.lang, 24));
        draw_text(room_width / 2, 390, language_map(global.lang, 14));
        switch(menu_select){
            case 0:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 23), 0.5, 0.5, 0);
                break;
                
            case 1:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 25), 0.5, 0.5, 0);
                break;
                
            case 2:
                draw_text_transformed(room_width / 2, 230, language_map(global.lang, 17), 0.5, 0.5, 0);
                break;
        }
        break;
        
    case 2:
        draw_set_halign(fa_left);
        switch(howto_page){
            case 0:
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 35), 35, 800, 0.5, 0.5, 0);
                break;
                
            case 1:
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 36), 35, 800, 0.5, 0.5, 0);
                break;
                
            case 2:
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 37), 35, 800, 0.5, 0.5, 0);
                break;
                
            case 3:
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 38), 35, 800, 0.5, 0.5, 0);
                break;
                
            case 4:
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 39), 35, 800, 0.5, 0.5, 0);
                break;
                
            case 5:
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 40), 35, 800, 0.5, 0.5, 0);
                break;
                
            case 6: 
                draw_text_ext_transformed(room_width / 2 + 30, 250, language_map(global.lang, 42), 35, 800, 0.5, 0.5, 0);
                break;
        }
        
        
        
        draw_set_halign(fa_center);
        if(howto_page &gt; 0) draw_text(32, room_height / 2, "&lt;");
        if(howto_page &lt; 6) draw_text(room_width - 32, room_height / 2, "&gt;");
        draw_sprite(spr_howto_play, howto_page, room_width / 2 - 100, room_height / 2);
        draw_text_transformed(room_width / 2, 450, language_map(global.lang, 17), 1, 1, 0);
        break;
    
    case 3:
        draw_set_valign(fa_top);
        draw_text_ext_transformed(room_width / 2 + 30, credit_scroll, language_map(global.lang, 41), 35, 960, 0.5, 0.5, 0);
        draw_set_valign(fa_middle);
        draw_text_transformed(room_width / 2, 450, language_map(global.lang, 17), 1, 1, 0);
        break;
}

//draw_text_transformed(room_width / 2, 526, string(global.local_hscore) + " : " + string(global.global_hscore[0]) + " : " + string(global.global_hscore[1]), 0.4, 0.4, 0);
draw_sprite(spr_bread, 2, room_width / 2 - 30, 526);
if(test[0] == "ok") draw_sprite(spr_bread, 5, room_width / 2, 526);
if(test[0] == "ok") draw_sprite(spr_bread, 7, room_width / 2 + 30, 526);

default_align();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
